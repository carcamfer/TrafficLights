from flask import Flask, jsonify, request
from flask_cors import CORS
import logging
import os
import paho.mqtt.client as mqtt

app = Flask(__name__)
CORS(app)

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuración MQTT - Reemplaza 'localhost' con '0.0.0.0' o IP del broker externo
MQTT_BROKER = "0.0.0.0"  # Reemplazar por la IP real del broker si es externo
MQTT_PORT = 1883
mqtt_client = mqtt.Client()

def on_connect(client, userdata, flags, rc):
    if rc == 0:
        logger.info("Conexión MQTT exitosa.")
    else:
        logger.error(f"Conexión MQTT fallida con código {rc}")

mqtt_client.on_connect = on_connect

try:
    mqtt_client.connect(MQTT_BROKER, MQTT_PORT, 60)
    mqtt_client.loop_start()
except Exception as e:
    logger.error(f"Error al conectar con el broker MQTT: {str(e)}")

LOG_FILE = "mqtt_logs.txt"

@app.route('/send', methods=['POST'])
def send_times():
    try:
        data = request.json
        device_id = "00000001"  # ID por defecto
        base_topic = f"smartSemaphore/lora_Device/{device_id}/set/time/light"
        
        if 'redColorTime' in data:
            value = int(data['redColorTime'])
            mqtt_client.publish(f"{base_topic}/red", value)
            logger.info(f"Publicado tiempo rojo: {value}")
            
        if 'greenColorTime' in data:
            value = int(data['greenColorTime'])
            mqtt_client.publish(f"{base_topic}/green", value)
            logger.info(f"Publicado tiempo verde: {value}")
        
        if 'yellowColorTime' in data:  # Publicar tiempo amarillo si se recibe
            value = int(data['yellowColorTime'])
            mqtt_client.publish(f"{base_topic}/yellow", value)
            logger.info(f"Publicado tiempo amarillo: {value}")
            
        return jsonify({"status": "success", "message": "Valores publicados exitosamente"})
    
    except ValueError as e:
        logger.error(f"Valor no válido en la solicitud: {str(e)}")
        return jsonify({"status": "error", "message": "Valor no válido"}), 400
    
    except Exception as e:
        logger.error(f"Error en /send: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/logs', methods=['GET'])
def get_logs():
    try:
        abs_path = os.path.abspath(LOG_FILE)
        logger.info(f"Intentando leer logs desde: {abs_path}")

        with open(LOG_FILE, "r") as file:
            raw_logs = file.readlines()
            logs = [line.strip() for line in raw_logs if line.strip()]
            logs = logs[-10:][::-1]  # Últimos 10 logs en orden inverso
            return jsonify({"logs": logs})
    
    except FileNotFoundError:
        logger.error(f"Archivo de logs {LOG_FILE} no encontrado")
        return jsonify({"logs": [], "error": "Archivo de logs no encontrado"}), 404
    
    except Exception as e:
        logger.error(f"Error leyendo los logs: {str(e)}")
        return jsonify({"logs": [], "error": str(e)}), 500

if __name__ == '__main__':
    logger.info("Iniciando servidor Flask...")
    app.run(host='0.0.0.0', port=5000, debug=True)
