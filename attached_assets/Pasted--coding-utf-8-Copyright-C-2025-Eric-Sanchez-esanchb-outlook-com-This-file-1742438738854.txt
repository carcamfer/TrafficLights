# -*- coding: utf-8 -*-
#
# Copyright (C) 2025 Eric Sanchez ( esanchb@outlook.com)
#
# This file is part of a software project distributed under the GNU General Public License v3.0 (GPL-3.0).
#
# The software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this software.
# If not, see <https://www.gnu.org/licenses/>.
#
# You may redistribute and/or modify this software under the terms of the GPL-3.0 as published by the Free Software Foundation.
#
# For more information, visit <https://www.gnu.org/licenses/gpl-3.0.html>.
import paho.mqtt.client as mqtt
import random
import sys



class TrafficLight:
    def __init__(self, redColorTime, yellowColorTime, greenColorTime, updatePub):
        self.redColorTime = redColorTime
        self.yellowColorTime = yellowColorTime
        self.greenColorTime = greenColorTime
        self.updatePub = updatePub

    def update(self, redColorTime=None, yellowColorTime=None, greenColorTime=None, updatePub=None):
        if redColorTime is not None:
            self.redColorTime = redColorTime
        if yellowColorTime is not None:
            self.yellowColorTime = yellowColorTime
        if greenColorTime is not None:
            self.greenColorTime = greenColorTime
        if updatePub is not None:
            self.updatePub = updatePub

    def display(self):
        print(f"Red Light Time: {self.redColorTime} seconds")
        print(f"Yellow Light Time: {self.yellowColorTime} seconds")
        print(f"Green Light Time: {self.greenColorTime} seconds")
        print(f"Update Publisher: {self.updatePub}")



# Check if exactly one argument is passed (excluding the script name)
if len(sys.argv) != 2:
    print("Usage: python3 receive_argument.py <argument>")
    sys.exit(1)

# Get the argument passed from the command line
argument = (sys.argv[1])


# Example usage:
traffic_light = TrafficLight(40, 40, 40,1)
traffic_light.display()

reportOnDemand=0

str_unitID=argument.zfill(8)

print("HEllo im the device "+str_unitID)

    # Report TOPICS
valRed=40
valGreen=40
valYellow=2

strTopicBase="smartSemaphore"+"/lora_Device/"+str_unitID
car_detectectTBase=strTopicBase+"/info/"+"cars/detect"
Topic_Red=strTopicBase+"/info/time"+"/light/"+"red"
Topic_Yellow=strTopicBase+"/info/time"+"/light/"+"yellow"
Topic_Green=strTopicBase+"/info/time"+"/light/"+"green"

TopicSetLDuration=strTopicBase+"/set/time/light/#"


# The callback for when the client receives a CONNACK response from the server.
def on_connect(client, userdata, flags, reason_code, properties):
    print(f"Connected with result code {reason_code}")
    # Subscribing in on_connect() means that if we lose the connection and
    # reconnect then subscriptions will be renewed.
    client.subscribe(TopicSetLDuration)

# The callback for when a PUBLISH message is received from the server.
def on_message(client, userdata, msg):
    print(msg.topic+" "+str(msg.payload))
    strReceived=msg.topic

    if "light/red" in strReceived:
       userdata.redColorTime=msg.payload
       userdata.updatePub=1
       client.user_data_set(userdata)    # <-- Update userdata
    if "light/green" in strReceived:
       userdata.greenColorTime=msg.payload
       userdata.updatePub=1
       client.user_data_set(userdata)    # <-- Update userdata
    if "light/yellow" in strReceived:
       userdata.yellowColorTime=msg.payload
       userdata.updatePub=1
       client.user_data_set(userdata)    # <-- Update userdata

mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2,userdata=traffic_light)
mqttc.on_connect = on_connect
mqttc.on_message = on_message

mqttc.connect("localhost", 1883, 60)
mqttc.loop_start()

import time
counterEv=0

#mqttc.user_data_set(1)    # <-- Initialize


while True:
    dataUsr=mqttc.user_data_get()
    if dataUsr.updatePub==1:
     mqttc.publish(Topic_Red, int(dataUsr.redColorTime))
     mqttc.publish(Topic_Yellow, int(dataUsr.yellowColorTime))
     mqttc.publish(Topic_Green, int(dataUsr.greenColorTime))
     dataUsr.updatePub=0
     mqttc.user_data_set(dataUsr)


    time.sleep(1)
    if(counterEv%5 == 0):
     if dataUsr.redColorTime < 40:
      carDetection= random.randrange(60, 100)
     else:
      carDetection= random.randrange(10, 43)
     mqttc.publish(car_detectectTBase, carDetection)
    counterEv=counterEv+1
    if(counterEv == 10000):
       counterEv=0
    
       
    