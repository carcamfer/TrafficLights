# -*- coding: utf-8 -*-
import paho.mqtt.client as mqtt
import random
import sys
import time
from collections import deque
from flask import Flask, request, jsonify

app = Flask(__name__)

class TrafficLight:
    def __init__(self, redColorTime, yellowColorTime, greenColorTime, updatePub):
        self.redColorTime = redColorTime
        self.yellowColorTime = yellowColorTime
        self.greenColorTime = greenColorTime
        self.updatePub = updatePub

    def update(self, redColorTime=None, yellowColorTime=None, greenColorTime=None, updatePub=None):
        if redColorTime is not None:
            self.redColorTime = redColorTime
        if yellowColorTime is not None:
            self.yellowColorTime = yellowColorTime
        if greenColorTime is not None:
            self.greenColorTime = greenColorTime
        if updatePub is not None:
            self.updatePub = updatePub

if len(sys.argv) != 2:
    print("Usage: python3 IOT_thing.py <device_id>")
    sys.exit(1)

device_id = sys.argv[1].zfill(8)
print(f"Hello, I am the device {device_id}")

traffic_light = TrafficLight(40, 2, 40, 1)

base_topic = f"smartSemaphore/lora_Device/{device_id}"
topic_car_detection = f"{base_topic}/info/cars/detect"
topic_red = f"{base_topic}/info/time/light/red"
topic_yellow = f"{base_topic}/info/time/light/yellow"
topic_green = f"{base_topic}/info/time/light/green"
topic_set_duration = f"{base_topic}/set/time/light/#"

log_queue = deque(maxlen=10)

def save_logs():
    with open("mqtt_logs.txt", "w") as file:
        file.writelines(log_queue)

def on_connect(client, userdata, flags, reason_code, properties):
    print(f"Connected with result code {reason_code}")
    client.subscribe(topic_set_duration)

def on_message(client, userdata, msg):
    message = f"{msg.topic} {msg.payload.decode()}"
    print(message)
    log_queue.append(message + "\n")
    save_logs()
    topic_received = msg.topic
    if "light/red" in topic_received:
        userdata.redColorTime = int(msg.payload.decode())
    elif "light/green" in topic_received:
        userdata.greenColorTime = int(msg.payload.decode())
    elif "light/yellow" in topic_received:
        userdata.yellowColorTime = int(msg.payload.decode())
    userdata.updatePub = 1
    client.user_data_set(userdata)

mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, userdata=traffic_light)
mqttc.on_connect = on_connect
mqttc.on_message = on_message
mqttc.connect("localhost", 1883, 60)
mqttc.loop_start()

@app.route("/update_light", methods=["POST"])
def update_light():
    data = request.json
    color = data.get("color")
    time_value = data.get("time")
    if color not in ["red", "yellow", "green"]:
        return jsonify({"error": "Invalid color"}), 400
    topic = f"{base_topic}/info/time/light/{color}"
    mqttc.publish(topic, time_value)
    return jsonify({"status": "success", "message": f"Updated {color} light time to {time_value}"})

counterEv = 0
while True:
    dataUsr = mqttc.user_data_get()
    mqttc.publish(topic_red, dataUsr.redColorTime)
    mqttc.publish(topic_yellow, dataUsr.yellowColorTime)
    mqttc.publish(topic_green, dataUsr.greenColorTime)
    log_queue.append(f"{topic_red} {dataUsr.redColorTime}\n")
    log_queue.append(f"{topic_yellow} {dataUsr.yellowColorTime}\n")
    log_queue.append(f"{topic_green} {dataUsr.greenColorTime}\n")
    save_logs()
    dataUsr.updatePub = 0
    mqttc.user_data_set(dataUsr)
    time.sleep(5)
    if counterEv % 5 == 0:
        carDetection = random.randint(60, 100) if dataUsr.redColorTime < 40 else random.randint(10, 43)
        mqttc.publish(topic_car_detection, carDetection)
        log_queue.append(f"{topic_car_detection} {carDetection}\n")
        save_logs()
    counterEv += 1
    if counterEv == 10000:
        counterEv = 0

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
